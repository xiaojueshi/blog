---
---

<theme-toggle>
  <button id="theme-toggle" title="切换主题">
    <!-- 太阳图标 (浅色主题) -->
    <svg xmlns="http://www.w3.org/2000/svg" id="sun-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    <!-- 月亮图标 (深色主题) -->
    <svg xmlns="http://www.w3.org/2000/svg" id="moon-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </button>
</theme-toggle>

<style>
  #theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: background-color 0.2s ease;
  }

  #theme-toggle:hover {
    background-color: rgba(var(--gray), 0.1);
  }

  #theme-toggle svg {
    width: 24px;
    height: 24px;
    color: rgb(var(--gray-dark));
    transition: transform 0.2s ease, opacity 0.2s ease;
  }

  #sun-icon {
    opacity: 0;
    position: absolute;
    transform: scale(0.5);
  }

  #moon-icon {
    opacity: 1;
    transform: scale(1);
  }

  :global([data-theme="dark"]) #sun-icon {
    opacity: 1;
    transform: scale(1);
  }

  :global([data-theme="dark"]) #moon-icon {
    opacity: 0;
    transform: scale(0.5);
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      
      // 初始化主题
      this.initTheme();
      
      // 添加切换事件
      const toggle = this.querySelector('#theme-toggle');
      toggle?.addEventListener('click', () => this.toggleTheme());
    }

    initTheme() {
      // 检查本地存储中的主题设置
      const storedTheme = localStorage.getItem('theme');
      
      // 如果有存储的主题设置，使用它
      if (storedTheme) {
        document.documentElement.setAttribute('data-theme', storedTheme);
        return;
      }
      
      // 否则，检查系统偏好
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
    }

    toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      // 更新DOM
      document.documentElement.setAttribute('data-theme', newTheme);
      
      // 保存到本地存储
      localStorage.setItem('theme', newTheme);
    }
  }

  // 注册自定义元素
  customElements.define('theme-toggle', ThemeToggle);
</script>