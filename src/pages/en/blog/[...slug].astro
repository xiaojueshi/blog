---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../../layouts/BlogPost.astro";
import { render } from "astro:content";
import { useTranslations } from "../../../i18n/utils";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  // 处理文章ID，提取基础名称和语言
  function processPostId(id: string) {
    // 检查是否在语言子目录中
    if (id.startsWith("zh/") || id.startsWith("en/")) {
      const [lang, ...rest] = id.split("/");
      return {
        baseName: rest.join("/"),
        language: lang,
        fullId: id,
      };
    }

    // 默认为英文
    return {
      baseName: id,
      language: "en",
      fullId: id,
    };
  }

  // 创建一个映射，用于存储每篇文章在每种语言中的版本
  const postsByBaseName = new Map();

  // 首先，按照基础名称对文章进行分组
  posts.forEach((post) => {
    const { baseName, language, fullId } = processPostId(post.id);

    if (!postsByBaseName.has(baseName)) {
      postsByBaseName.set(baseName, new Map());
    }

    postsByBaseName.get(baseName).set(language, { post, fullId });
  });

  // 然后，为英文路径生成路径
  const paths: {
    params: { slug: string };
    props: { post: CollectionEntry<"blog">; isUsingFallback: boolean };
  }[] = [];

  postsByBaseName.forEach((langMap, baseName) => {
    // 首先尝试获取英文文章
    let postData = langMap.get("en");
    let isUsingFallback = false;

    // 如果没有英文文章，则尝试获取中文文章
    if (!postData) {
      postData = langMap.get("zh");
      isUsingFallback = true;
    }

    // 如果找到了文章（无论是英文还是中文），则生成路径
    if (postData) {
      paths.push({
        params: { slug: baseName },
        props: { post: postData.post, isUsingFallback },
      });
    }
  });

  return paths;
}

interface Props {
  post: CollectionEntry<"blog">;
  isUsingFallback: boolean;
}

const { post, isUsingFallback } = Astro.props;
const { Content } = await render(post);

// 获取当前语言的翻译
const lang = "en";
const t = useTranslations(lang);
---

<BlogPost {...post.data}>
  {
    isUsingFallback && (
      <div class="fallback-notice">
        <p>{t("blog.fallback.notice")}</p>
      </div>
    )
  }
  <Content />
</BlogPost>

<style>
  .fallback-notice {
    background-color: #f8f9fa;
    border-left: 4px solid #6c757d;
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 0 4px 4px 0;
  }

  .fallback-notice p {
    margin: 0;
    color: #495057;
    font-style: italic;
  }
</style>
