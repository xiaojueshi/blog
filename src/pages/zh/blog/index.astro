---
import { useTranslations } from "../../../i18n/utils";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../../config";
import { getCollection } from "astro:content";
import FormattedDate from "../../../components/FormattedDate.astro";
import { Image } from "astro:assets";

// 获取当前语言
const lang = "zh";
const t = useTranslations(lang);

// 设置正确的语言标签
const htmlLang = "zh-CN";

// 获取当前语言的网站标题和描述
const siteTitle = SITE_TITLE.zh;
const siteDescription = SITE_DESCRIPTION.zh;

// 获取所有文章
const allPosts = await getCollection("blog");

// 按文章基础名称分组，优先显示中文文章
const postsByBaseName = new Map();

// 处理文章ID，提取基础名称和语言
function processPostId(id: string) {
  // 检查是否在语言子目录中
  if (id.startsWith("zh/") || id.startsWith("en/")) {
    const [lang, ...rest] = id.split("/");
    return {
      baseName: rest.join("/"),
      language: lang,
    };
  }

  // 默认为英文
  return {
    baseName: id,
    language: "en",
  };
}

// 首先添加所有中文文章
allPosts
  .filter((post) => {
    const { language } = processPostId(post.id);
    return language === "zh";
  })
  .forEach((post) => {
    const { baseName } = processPostId(post.id);
    postsByBaseName.set(baseName, post);
  });

// 然后添加没有中文版本的英文文章
allPosts
  .filter((post) => {
    const { language } = processPostId(post.id);
    return language === "en";
  })
  .forEach((post) => {
    const { baseName } = processPostId(post.id);
    if (!postsByBaseName.has(baseName)) {
      postsByBaseName.set(baseName, post);
    }
  });

// 转换为数组并排序
const posts = Array.from(postsByBaseName.values()).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<!doctype html>
<html lang={htmlLang}>
  <head>
    <BaseHead title={siteTitle} description={siteDescription} />
    <style>
      main {
        width: 960px;
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:first-child {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li:first-child img {
        width: 100%;
      }
      ul li:first-child .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      ul li a:hover h4,
      ul li a:hover .date {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }
      .empty-state {
        text-align: center;
        padding: 4rem 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin: 2rem 0;
      }
      .empty-state h2 {
        margin-top: 0;
        color: #495057;
      }
      .empty-state p {
        color: #6c757d;
        max-width: 600px;
        margin: 1rem auto;
      }
      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section>
        {
          posts.length > 0 ? (
            <ul>
              {posts.map((post, index) => {
                const { baseName } = processPostId(post.id);
                return (
                  <li>
                    <a href={`/zh/blog/${baseName}/`}>
                      <Image
                        width={720}
                        height={360}
                        src={post.data.heroImage as string}
                        alt=""
                        loading={index <= 4 ? "eager" : "lazy"}
                      />
                      <h4 class="title">{post.data.title}</h4>
                      <p class="date">
                        <FormattedDate date={post.data.pubDate} />
                      </p>
                    </a>
                  </li>
                );
              })}
            </ul>
          ) : (
            <div class="empty-state">
              <h2>{t("blog.empty.title")}</h2>
              <p>{t("blog.empty.description")}</p>
            </div>
          )
        }
      </section>
    </main>
    <Footer />
  </body>
</html>
